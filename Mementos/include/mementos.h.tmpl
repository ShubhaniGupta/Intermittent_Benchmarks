/*
Copyright (c) 2011, University of Massachusetts Amherst
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. Neither the name of the University of Massachusetts Amherst nor the
    names of its contributors may be used to endorse or promote products
    derived from this software without specific prior written
    permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef __NEWMEM_H__
#define __NEWMEM_H__

#if (!defined(__MSP430F2131__) && \
        !defined(__MSP430F2132__) && \
        !defined(__MSP430F1611__) && \
        !defined(__MSP430F2618__) && \
        !defined(__MSP430FR5969__))
#error Unsupported hardware; see mementos.h.
#endif

#if defined(__MSP430F2131__)
#  include <f2131.h>
#elif defined(__MSP430F2132__)
#  include <f2132.h>
#elif defined(__MSP430F1611__)
#  include <f1611.h>
#elif defined(__MSP430F2618__)
#  include <f2618.h>
#elif defined(__MSP430FR5969__)
#  include <fr5969.h>
#else
#  error Missing or unsupported chip.
#endif

#ifdef MEMENTOS_FRAM
#  include <mementos_fram.h>
#else
#  include <mementos_flash.h>
#endif

#define RAM_SIZE (TOPOFSTACK+1 - STARTOFDATA)

/* where do the segments to which we can write checkpoint bundles start? 
#ifdef __MSP430F2618__
#define FIRST_BUNDLE_SEG 0xF900
#define SECOND_BUNDLE_SEG 0xFB00
#else
#define FIRST_BUNDLE_SEG 0xFA00u
#define SECOND_BUNDLE_SEG 0xFC00u
#endif // __MSP430F2618__
#define INFOMEM_SEGSIZE 64
#define MAINMEM_SEGSIZE 512
*/

#ifndef V_THRESH
/* in Haskell: map (\x -> (x, round $ 65536 * (x/3.0)/2.5)) [1.8,1.9..5.0] */
// #define V_THRESH 15729 // 1.8 volts
// #define V_THRESH 16602 // 1.9 volts
// #define V_THRESH 17476 // 2.0 volts
// #define V_THRESH 18350 // 2.1 volts
// #define V_THRESH 19224 // 2.2 volts
// #define V_THRESH 20098 // 2.3 volts
// #define V_THRESH 20972 // 2.4 volts
// #define V_THRESH 21845 // 2.5 volts
// #define V_THRESH 22719 // 2.6 volts
// #define V_THRESH 23593 // 2.7 volts
// #define V_THRESH 24467 // 2.8 volts
// #define V_THRESH 25341 // 2.9 volts
// #define V_THRESH 26214 // 3.0 volts
// #define V_THRESH 27088 // 3.1 volts
// #define V_THRESH 27962 // 3.2 volts
// #define V_THRESH 28836 // 3.3 volts
// #define V_THRESH 29710 // 3.4 volts
// #define V_THRESH 30583 // 3.5 volts
// #define V_THRESH 31457 // 3.6 volts
// #define V_THRESH 32331 // 3.7 volts
// #define V_THRESH 33205 // 3.8 volts
// #define V_THRESH 34079 // 3.9 volts
// #define V_THRESH 34953 // 4.0 volts
// #define V_THRESH 35826 // 4.1 volts
// #define V_THRESH 36700 // 4.2 volts
// #define V_THRESH 37574 // 4.3 volts
// #define V_THRESH 38448 // 4.4 volts
// #define V_THRESH 39322 // 4.5 volts
// #define V_THRESH 40195 // 4.6 volts
// #define V_THRESH 41069 // 4.7 volts
// #define V_THRESH 41943 // 4.8 volts
// #define V_THRESH 42817 // 4.9 volts
// #define V_THRESH 43691 // 5.0 volts
#endif // V_THRESH

/* silly string functions for stringifying #define'd constants -- don't ask */
#define xstr(s) str(s)
#define str(s) #s

/* function prototypes */
//void __mementos_checkpoint (void);
//void __mementos_restore (unsigned int);
//void __mementos_erase_segment (unsigned int);
//void __mementos_mark_segment_erase (unsigned int);
//unsigned int __mementos_segment_is_empty (unsigned int);
//unsigned int __mementos_segment_marked_erase (unsigned int);
//unsigned int __mementos_locate_next_bundle (unsigned int);
//unsigned int __mementos_find_active_bundle (void);

#ifdef MEMENTOS_LOGGING
# define MEMENTOS_STATUS_STARTING_CHECKPOINT 0x1
# define MEMENTOS_STATUS_COMPLETED_CHECKPOINT 0x2
# define MEMENTOS_STATUS_STARTING_RESTORATION 0x4
# define MEMENTOS_STATUS_STARTING_MAIN 0x8
# define MEMENTOS_STATUS_FINDING_BUNDLE 0x9
# define MEMENTOS_STATUS_DONE_FINDING_BUNDLE 0xA
# define MEMENTOS_STATUS_HELLO 0xB
# define MEMENTOS_STATUS_CHECKING_VOLTAGE 0xC
# define MEMENTOS_STATUS_DONE_CHECKING_VOLTAGE 0xD
# define MEMENTOS_STATUS_PROGRAM_COMPLETE 0xE
void __mementos_log_event (unsigned char);
#else
# define __mementos_log_event(x)
#endif // MEMENTOS_LOGGING

#ifdef MEMENTOS_HARDWARE
unsigned int __mementos_voltage_check (void);
#define VOLTAGE_CHECK __mementos_voltage_check()
#else
/* 0x01C0 is an (apparently) unused addr in peripheral memory on MSP430F2132, so
 * our simulator (mspsim) tracks accesses to it and returns energy data when
 * it's read. */
extern volatile unsigned int VOLTAGE_CHECK asm("0x01C0");
#endif // MEMENTOS_HARDWARE

#define MEMENTOS_MAGIC_NUMBER 0xBEADu

/* horrible cheating hackery */
#ifdef __MSP430F2131__
#define TOPOFSTACK 0x0300
#define STARTOFDATA 0x0200
#elif defined(__MSP430F2132__)
#define TOPOFSTACK 0x0400
#define STARTOFDATA 0x0200
#elif defined(__MSP430F1611__)
#define TOPOFSTACK 0x3900
#define STARTOFDATA 0x1100
#elif defined(__MSP430F2618__)
#define TOPOFSTACK 0x3100
#define STARTOFDATA 0x1100
#endif

#ifdef MEMENTOS_TIMER
void Timer_A (void) __attribute__((interrupt(12))); // 0xFFEC for F1611 XXX
//==TIMER_INTERVAL==
#endif

#define MEMREF(x) (*((unsigned int*)(x)))
#define MEMREF_UINT(x) (*((unsigned int*)(x)))
#define MEMREF_ULONG(x) (*((unsigned long*)(x)))

#define BUNDLE_SIZE_REGISTERS 30 // 15 * 2 bytes == 30 bytes
#define BUNDLE_SIZE_HEADER 2     // stack size (1 byte)
                                 // + dataseg size (1 byte)
#define BUNDLE_SIZE_MAGIC 2      // 2 bytes for MEMENTOS_MAGIC_NUMBER

// distances from start of bundle...
#define REGISTERS_OFFSET BUNDLE_SIZE_HEADER
#define STACK_OFFSET (BUNDLE_SIZE_HEADER + BUNDLE_SIZE_REGISTERS)

#define ROUND_TO_NEXT_EVEN(x) (((x)+1) & 0xFFFEu)

typedef unsigned char bool;

#endif /* __NEWMEM_H__ */
// vim:ft=c
